/*
 * This file is generated by jOOQ.
 */
package ru.alexredby.stocktaking.model.tables.records


import java.time.LocalDateTime

import org.jooq.Record1
import org.jooq.impl.UpdatableRecordImpl

import ru.alexredby.stocktaking.model.tables.Item


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class ItemRecord() : UpdatableRecordImpl<ItemRecord>(Item.ITEM) {

    open var id: Int?
        set(value): Unit = set(0, value)
        get(): Int? = get(0) as Int?

    open var name: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    open var shortName: String?
        set(value): Unit = set(2, value)
        get(): String? = get(2) as String?

    open var basePrice: Int?
        set(value): Unit = set(3, value)
        get(): Int? = get(3) as Int?

    open var wikiLink: String?
        set(value): Unit = set(4, value)
        get(): String? = get(4) as String?

    open var updated: LocalDateTime?
        set(value): Unit = set(5, value)
        get(): LocalDateTime? = get(5) as LocalDateTime?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Int?> = super.key() as Record1<Int?>

    /**
     * Create a detached, initialised ItemRecord
     */
    constructor(id: Int? = null, name: String? = null, shortName: String? = null, basePrice: Int? = null, wikiLink: String? = null, updated: LocalDateTime? = null): this() {
        this.id = id
        this.name = name
        this.shortName = shortName
        this.basePrice = basePrice
        this.wikiLink = wikiLink
        this.updated = updated
        resetChangedOnNotNull()
    }
}
